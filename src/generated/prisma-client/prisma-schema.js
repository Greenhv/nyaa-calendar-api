module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAnime {
  count: Int!
}

type Anime {
  id: ID!
  slug: String!
  published: Boolean!
  title: String!
  episode: Int!
}

type AnimeConnection {
  pageInfo: PageInfo!
  edges: [AnimeEdge]!
  aggregate: AggregateAnime!
}

input AnimeCreateInput {
  id: ID
  slug: String!
  published: Boolean
  title: String!
  episode: Int!
}

type AnimeEdge {
  node: Anime!
  cursor: String!
}

enum AnimeOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  episode_ASC
  episode_DESC
}

type AnimePreviousValues {
  id: ID!
  slug: String!
  published: Boolean!
  title: String!
  episode: Int!
}

type AnimeSubscriptionPayload {
  mutation: MutationType!
  node: Anime
  updatedFields: [String!]
  previousValues: AnimePreviousValues
}

input AnimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnimeWhereInput
  AND: [AnimeSubscriptionWhereInput!]
  OR: [AnimeSubscriptionWhereInput!]
  NOT: [AnimeSubscriptionWhereInput!]
}

input AnimeUpdateInput {
  slug: String
  published: Boolean
  title: String
  episode: Int
}

input AnimeUpdateManyMutationInput {
  slug: String
  published: Boolean
  title: String
  episode: Int
}

input AnimeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  episode: Int
  episode_not: Int
  episode_in: [Int!]
  episode_not_in: [Int!]
  episode_lt: Int
  episode_lte: Int
  episode_gt: Int
  episode_gte: Int
  AND: [AnimeWhereInput!]
  OR: [AnimeWhereInput!]
  NOT: [AnimeWhereInput!]
}

input AnimeWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createAnime(data: AnimeCreateInput!): Anime!
  updateAnime(data: AnimeUpdateInput!, where: AnimeWhereUniqueInput!): Anime
  updateManyAnimes(data: AnimeUpdateManyMutationInput!, where: AnimeWhereInput): BatchPayload!
  upsertAnime(where: AnimeWhereUniqueInput!, create: AnimeCreateInput!, update: AnimeUpdateInput!): Anime!
  deleteAnime(where: AnimeWhereUniqueInput!): Anime
  deleteManyAnimes(where: AnimeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  anime(where: AnimeWhereUniqueInput!): Anime
  animes(where: AnimeWhereInput, orderBy: AnimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Anime]!
  animesConnection(where: AnimeWhereInput, orderBy: AnimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnimeConnection!
  node(id: ID!): Node
}

type Subscription {
  anime(where: AnimeSubscriptionWhereInput): AnimeSubscriptionPayload
}
`
      }
    